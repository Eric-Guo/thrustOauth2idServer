// Code generated by https://github.com/go-dev-frame/sponge; DO NOT EDIT.

package config

import (
	"github.com/go-dev-frame/sponge/pkg/conf"
)

var config *Config

func Init(configFile string, fs ...func()) error {
	config = &Config{}
	return conf.Parse(configFile, config, fs...)
}

func Show(hiddenFields ...string) string {
	return conf.Show(config, hiddenFields...)
}

func Get() *Config {
	if config == nil {
		panic("config is nil, please call config.Init() first")
	}
	return config
}

func Set(conf *Config) {
	config = conf
}

type Config struct {
	App      App      `yaml:"app" json:"app"`
	Database Database `yaml:"database" json:"database"`
	HTTP     HTTP     `yaml:"http" json:"http"`
	Jaeger   Jaeger   `yaml:"jaeger" json:"jaeger"`
	Logger   Logger   `yaml:"logger" json:"logger"`
	Proxy    Proxy    `yaml:"proxy" json:"proxy"`
	Rails    Rails    `yaml:"rails" json:"rails"`
	Redis    Redis    `yaml:"redis" json:"redis"`
}

type TLS struct {
	AcmeDirectory string   `yaml:"acmeDirectory" json:"acmeDirectory"`
	Domains       []string `yaml:"domains" json:"domains"`
	Eab           Eab      `yaml:"eab" json:"eab"`
	StoragePath   string   `yaml:"storagePath" json:"storagePath"`
}

type HTTP struct {
	AddRequestStartHeader bool `yaml:"addRequestStartHeader" json:"addRequestStartHeader"`
	GzipEnabled           bool `yaml:"gzipEnabled" json:"gzipEnabled"`
	HTTPSPort             int  `yaml:"httpsPort" json:"httpsPort"`
	IdleTimeout           int  `yaml:"idleTimeout" json:"idleTimeout"`
	LogRequests           bool `yaml:"logRequests" json:"logRequests"`
	MaxRequestBodyBytes   int  `yaml:"maxRequestBodyBytes" json:"maxRequestBodyBytes"`
	Port                  int  `yaml:"port" json:"port"`
	ReadTimeout           int  `yaml:"readTimeout" json:"readTimeout"`
	Timeout               int  `yaml:"timeout" json:"timeout"`
	TLS                   TLS  `yaml:"tls" json:"tls"`
	WriteTimeout          int  `yaml:"writeTimeout" json:"writeTimeout"`
}

type Jaeger struct {
	AgentHost string `yaml:"agentHost" json:"agentHost"`
	AgentPort int    `yaml:"agentPort" json:"agentPort"`
}

type Proxy struct {
	BadGatewayPage   string `yaml:"badGatewayPage" json:"badGatewayPage"`
	Cache            Cache  `yaml:"cache" json:"cache"`
	Enabled          bool   `yaml:"enabled" json:"enabled"`
	ForwardHeaders   bool   `yaml:"forwardHeaders" json:"forwardHeaders"`
	TargetURL        string `yaml:"targetURL" json:"targetURL"`
	XSendfileEnabled bool   `yaml:"xSendfileEnabled" json:"xSendfileEnabled"`
}

type App struct {
	CacheType            string  `yaml:"cacheType" json:"cacheType"`
	EnableCircuitBreaker bool    `yaml:"enableCircuitBreaker" json:"enableCircuitBreaker"`
	EnableHTTPProfile    bool    `yaml:"enableHTTPProfile" json:"enableHTTPProfile"`
	EnableLimit          bool    `yaml:"enableLimit" json:"enableLimit"`
	EnableMetrics        bool    `yaml:"enableMetrics" json:"enableMetrics"`
	EnableStat           bool    `yaml:"enableStat" json:"enableStat"`
	EnableTrace          bool    `yaml:"enableTrace" json:"enableTrace"`
	Env                  string  `yaml:"env" json:"env"`
	Host                 string  `yaml:"host" json:"host"`
	Name                 string  `yaml:"name" json:"name"`
	TracingSamplingRate  float64 `yaml:"tracingSamplingRate" json:"tracingSamplingRate"`
	Version              string  `yaml:"version" json:"version"`
}

type Cache struct {
	CapacityBytes        int  `yaml:"capacityBytes" json:"capacityBytes"`
	Enabled              bool `yaml:"enabled" json:"enabled"`
	MaxItemSizeBytes     int  `yaml:"maxItemSizeBytes" json:"maxItemSizeBytes"`
	MaxResponseBodyBytes int  `yaml:"maxResponseBodyBytes" json:"maxResponseBodyBytes"`
}

type Sqlite struct {
	ConnMaxLifetime int    `yaml:"connMaxLifetime" json:"connMaxLifetime"`
	DBFile          string `yaml:"dbFile" json:"dbFile"`
	EnableLog       bool   `yaml:"enableLog" json:"enableLog"`
	MaxIdleConns    int    `yaml:"maxIdleConns" json:"maxIdleConns"`
	MaxOpenConns    int    `yaml:"maxOpenConns" json:"maxOpenConns"`
}

type Rails struct {
	CookieName    string `yaml:"cookieName" json:"cookieName"`
	SecretKeyBase string `yaml:"secretKeyBase" json:"secretKeyBase"`
	UserID        int    `yaml:"userID" json:"userID"`
}

type Redis struct {
	DialTimeout  int    `yaml:"dialTimeout" json:"dialTimeout"`
	Dsn          string `yaml:"dsn" json:"dsn"`
	ReadTimeout  int    `yaml:"readTimeout" json:"readTimeout"`
	WriteTimeout int    `yaml:"writeTimeout" json:"writeTimeout"`
}

type Database struct {
	Driver string `yaml:"driver" json:"driver"`
	Sqlite Sqlite `yaml:"sqlite" json:"sqlite"`
}

type Logger struct {
	Format string `yaml:"format" json:"format"`
	IsSave bool   `yaml:"isSave" json:"isSave"`
	Level  string `yaml:"level" json:"level"`
}

type Eab struct {
	HmacKey string `yaml:"hmacKey" json:"hmacKey"`
	Kid     string `yaml:"kid" json:"kid"`
}